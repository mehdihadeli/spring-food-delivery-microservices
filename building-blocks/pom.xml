<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.github.mehdihadeli</groupId>
    <artifactId>spring-food-delivery-microservices</artifactId>
    <relativePath>../pom.xml</relativePath> <!-- Point to the root POM -->
    <version>1.0-SNAPSHOT</version>
  </parent>

  <artifactId>building-blocks</artifactId>

  <properties>
    <maven.compiler.source>23</maven.compiler.source>
    <maven.compiler.target>23</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencies>
    <!-- Spring MVC -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- https://docs.spring.io/spring-data/jpa/reference/-->
    <!-- https://docs.jboss.org/hibernate/orm/6.6/quickstart/html_single/-->
    <!-- https://docs.spring.io/spring-boot/reference/data/sql.html#data.sql.jpa-and-spring-data-->
    <!--`JPA` is a Java Persistence API (JPA) specification and `Spring Data` Helps us to implement JPA-based repositories and uses hibernate as most popular JPA implementations and orm provider and default jpa implementation in `spring-boot-starter-data-jpa` but we can exclude it. we can see dependencies with `mvn dependency:tree` -->
    <!-- Spring Data JPA -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <!-- H2 database -->
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <scope>runtime</scope>
    </dependency>
    <!-- PostgreSQL database -->
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <scope>runtime</scope>
    </dependency>
    <!--MongoDB-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-mongodb</artifactId>
    </dependency>
    <!-- QueryDSL Dependencies -->
    <!-- https://github.com/querydsl/querydsl/issues/3493-->
    <!-- we should put `jakarta classifier` also here, in order JPAQueryFactory uses jakarta.EntityManager instead of javax.EntityManager-->
    <dependency>
      <groupId>com.querydsl</groupId>
      <artifactId>querydsl-jpa</artifactId>
      <classifier>jakarta</classifier>
    </dependency>
    <dependency>
      <groupId>com.querydsl</groupId>
      <artifactId>querydsl-apt</artifactId>
      <classifier>jakarta</classifier>
    </dependency>
    <!-- Swagger-->
    <!-- https://springdoc.org/-->
    <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
    </dependency>
    <!-- Swagger Annotations-->
    <!-- https://springdoc.org/#migrating-from-springfox-->
    <!-- https://mvnrepository.com/artifact/io.swagger.core.v3/swagger-annotations-->
    <dependency>
      <groupId>io.swagger.core.v3</groupId>
      <artifactId>swagger-annotations</artifactId>
    </dependency>
    <!-- MapStruct-->
    <!--https://mapstruct.org/documentation/stable/reference/html/-->
    <dependency>
      <groupId>org.mapstruct</groupId>
      <artifactId>mapstruct</artifactId>
    </dependency>
    <!-- Spring Configuration-->
    <!--https://docs.spring.io/spring-boot/specification/configuration-metadata/annotation-processor.html-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <optional>true</optional>
    </dependency>
    <!-- Spring Boot Starter Test (includes JUnit and Mockito, Assertj, Hamcrest) -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
    </dependency>
    <!-- Test with TestContainers -->
    <!-- https://testcontainers.com/guides/testing-spring-boot-rest-api-using-testcontainers/-->
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>postgresql</artifactId>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>rabbitmq</artifactId>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>mongodb</artifactId>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>junit-jupiter</artifactId>
    </dependency>
    <dependency>
      <groupId>org.wiremock</groupId>
      <artifactId>wiremock</artifactId>
    </dependency>
    <!-- Run Tests using RestAssured -->
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- Fake object generator with instancio-junit-->
    <dependency>
      <groupId>org.instancio</groupId>
      <artifactId>instancio-junit</artifactId>
    </dependency>

    <!-- Bean Validation API Reference Implementation -->
    <!-- use `hibernate-validator` as implementation of `jakarta.validation-api` specification internally-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>

    <!-- dependency injection abstractions-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
    </dependency>

    <!-- https://docs.spring.io/spring-boot/how-to/logging.html#howto.logging.log4j-->
    <!-- exclude log from `spring-boot-starter` because default log will add to all starters depends on `spring-boot-starter` like `web` and `jpa`-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter</artifactId>
      <exclusions>
        <exclusion>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-logging</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- log4j2-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-log4j2</artifactId>
    </dependency>

    <!-- OpenTelemetry-->
    <!-- https://opentelemetry.io/docs/zero-code/java/spring-boot-starter/getting-started/#opentelemetry-starter-dependency-->
    <!-- https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/main/instrumentation/log4j/log4j-appender-2.17/library/README.md-->
    <!-- https://github.com/open-telemetry/opentelemetry-java-->
    <dependency>
      <groupId>io.opentelemetry.instrumentation</groupId>
      <artifactId>opentelemetry-spring-boot-starter</artifactId>
    </dependency>

    <!-- https://github.com/open-telemetry/opentelemetry-java/tree/main/exporters/zipkin-->
    <!-- https://opentelemetry.io/docs/languages/java/intro/#dependencies-and-boms-->
    <!--exists in the `opentelemetry-bom` pom.xml-->
    <dependency>
      <groupId>io.opentelemetry</groupId>
      <artifactId>opentelemetry-exporter-zipkin</artifactId>
    </dependency>

    <!-- https://opentelemetry.io/docs/languages/java/intro/#dependencies-and-boms-->
    <!-- https://github.com/open-telemetry/opentelemetry-java-instrumentation/tree/main/instrumentation/rabbitmq-2.7-->
    <!--exists in the `opentelemetry-instrumentation-bom-alpha` pom.xml-->
    <!-- auto instrumentation of rabbitmq-->
    <dependency>
      <groupId>io.opentelemetry.javaagent.instrumentation</groupId>
      <artifactId>opentelemetry-javaagent-rabbitmq-2.7</artifactId>
    </dependency>

    <!-- OpenTelemetry Prometheus Exporter -->
    <!-- https://github.com/open-telemetry/opentelemetry-java-examples/blob/main/prometheus/src/main/java/io/opentelemetry/example/prometheus/ExampleConfiguration.java-->
    <!-- https://github.com/open-telemetry/opentelemetry-java/tree/main/exporters/prometheus-->
    <!--exists in the `opentelemetry-bom-alpha` pom.xml-->
    <dependency>
      <groupId>io.opentelemetry</groupId>
      <artifactId>opentelemetry-exporter-prometheus</artifactId>
    </dependency>

    <!-- Guava: Google Core Libraries For Java-->
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
    </dependency>

    <!-- ulid-creator-->
    <dependency>
      <groupId>com.github.f4b6a3</groupId>
      <artifactId>ulid-creator</artifactId>
    </dependency>

    <!-- https://docs.jboss.org/hibernate/orm/5.0/topical/html/metamodelgen/MetamodelGenerator.html-->
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-jpamodelgen</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-amqp</artifactId>
    </dependency>
    <!-- https://docs.spring.io/spring-amqp/reference/testing.html-->
    <dependency>
      <groupId>org.springframework.amqp</groupId>
      <artifactId>spring-rabbit-test</artifactId>
    </dependency>

    <!-- Spring Boot already includes jackson packages via spring-boot-starter-json (which is part of spring-boot-starter-web): jackson-databind,jackson-core, jackson-annotations-->
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jsr310</artifactId>
    </dependency>

    <!-- flyway-->
    <!-- https://docs.spring.io/spring-boot/how-to/data-initialization.html#howto.data-initialization.migration-tool-->
    <!-- https://blog.jetbrains.com/idea/2024/11/how-to-use-flyway-for-database-migrations-in-spring-boot-applications/-->
    <!-- In-memory migration support-->
    <!-- To automatically run Flyway database migrations on startup-->
    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-database-postgresql</artifactId>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- https://mapstruct.org/documentation/installation/-->
      <!-- maven-compiler-plugin use for generating mapping implementation on build time as source generator-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <annotationProcessorPaths>
            <!-- To generate Jakarta compatible model -->
            <!-- https://github.com/querydsl/querydsl/issues/3736-->
            <path>
              <groupId>com.querydsl</groupId>
              <artifactId>querydsl-apt</artifactId>
              <classifier>jakarta</classifier>
              <version>${querydsl-jpa.version}</version>
            </path>
            <path>
              <groupId>jakarta.persistence</groupId>
              <artifactId>jakarta.persistence-api</artifactId>
              <version>${jakarta-api.version}</version>
            </path>
            <path>
              <groupId>jakarta.annotation</groupId>
              <artifactId>jakarta.annotation-api</artifactId>
              <version>${jakarta-annotation.version}</version>
            </path>
            <!-- https://docs.jboss.org/hibernate/orm/5.4/topical/html_single/metamodelgen/MetamodelGenerator.html-->
            <path>
              <groupId>org.hibernate</groupId>
              <artifactId>hibernate-jpamodelgen</artifactId>
              <version>${hibernate-jpamodelgen.version}</version>
            </path>
          </annotationProcessorPaths>

          <compilerArgs>
            <compilerArgs>
              <!--
               Important:
               From https://github.com/querydsl/querydsl/issues/3681#issuecomment-1968182489
               -->
              -Aquerydsl.generatedAnnotationClass=jakarta.annotation.Generated
            </compilerArgs>
          </compilerArgs>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>
