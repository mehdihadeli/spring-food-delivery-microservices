{
  "groups": [],
  "properties": [
    {
      "name": "custom-jpa.jpa.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "JPA properties with Hibernate configuration options."
    }
  ],
  "hints": [
    {
      "name": "custom-jpa.jpa.hibernate.ddl-auto",
      "values": [
        {
          "value": "none",
          "description": "Disable DDL handling."
        },
        {
          "value": "validate",
          "description": "Validate the schema, make no changes to the database."
        },
        {
          "value": "update",
          "description": "Update the schema if necessary."
        },
        {
          "value": "create",
          "description": "Create the schema and destroy previous data."
        },
        {
          "value": "create-drop",
          "description": "Create and then destroy the schema at the end of the session."
        }
      ]
    },
    {
      "name": "custom-jpa.jpa.hibernate.naming.implicit-strategy",
      "providers": [
        {
          "name": "class-reference",
          "parameters": {
            "target": "org.hibernate.boot.model.naming.ImplicitNamingStrategy"
          }
        }
      ]
    },
    {
      "name": "custom-jpa.jpa.hibernate.naming.physical-strategy",
      "providers": [
        {
          "name": "class-reference",
          "parameters": {
            "target": "org.hibernate.boot.model.naming.PhysicalNamingStrategy"
          }
        }
      ]
    },
    {
      "name": "custom-jpa.jpa.properties.keys",
      "values": [
        {
          "value": "hibernate.dialect",
          "description": "The SQL dialect to use for database communication."
        },
        {
          "value": "hibernate.connection.driver_class",
          "description": "The class name of the JDBC driver to use."
        },
        {
          "value": "hibernate.connection.url",
          "description": "The JDBC connection URL to use."
        },
        {
          "value": "hibernate.connection.username",
          "description": "The username used for database authentication."
        },
        {
          "value": "hibernate.connection.password",
          "description": "The password used for database authentication."
        },
        {
          "value": "hibernate.show_sql",
          "description": "Enable logging of all SQL statements generated by Hibernate."
        },
        {
          "value": "hibernate.format_sql",
          "description": "Pretty print SQL in the logs for better readability."
        },
        {
          "value": "hibernate.hbm2ddl.auto",
          "description": "Automatically validates or exports schema DDL to the database (e.g., validate, update, create, create-drop)."
        },
        {
          "value": "hibernate.cache.use_second_level_cache",
          "description": "Enable or disable the second-level cache."
        },
        {
          "value": "hibernate.cache.use_query_cache",
          "description": "Enable or disable the query cache."
        },
        {
          "value": "hibernate.cache.region.factory_class",
          "description": "The second-level cache region factory class."
        },
        {
          "value": "hibernate.jdbc.batch_size",
          "description": "The batch size used for JDBC batching."
        },
        {
          "value": "hibernate.jdbc.fetch_size",
          "description": "The fetch size used for JDBC queries."
        },
        {
          "value": "hibernate.jdbc.timezone",
          "description": "The JDBC connection timezone."
        },
        {
          "value": "hibernate.transaction.jta.platform",
          "description": "The JTA platform implementation to use."
        },
        {
          "value": "hibernate.transaction.coordinator_class",
          "description": "The transaction coordinator to use."
        },
        {
          "value": "hibernate.multiTenancy",
          "description": "Enable multi-tenancy support (e.g., NONE, SCHEMA, DATABASE, DISCRIMINATOR)."
        },
        {
          "value": "hibernate.tenant_identifier_resolver",
          "description": "Custom resolver for determining the current tenant identifier."
        },
        {
          "value": "hibernate.generate_statistics",
          "description": "Enable or disable the collection of Hibernate statistics."
        },
        {
          "value": "hibernate.use_identifier_rollback",
          "description": "Enable or disable identifier rollback for deleted entities."
        },
        {
          "value": "hibernate.query.plan_cache_max_size",
          "description": "Maximum number of query plans to cache."
        },
        {
          "value": "hibernate.query.plan_parameter_metadata_max_size",
          "description": "Maximum size of parameter metadata in the query plan cache."
        },
        {
          "value": "hibernate.bytecode.provider",
          "description": "The bytecode provider to use (e.g., bytebuddy or javassist)."
        },
        {
          "value": "hibernate.default_schema",
          "description": "The default schema to use."
        },
        {
          "value": "hibernate.default_catalog",
          "description": "The default catalog to use."
        },
        {
          "value": "hibernate.order_updates",
          "description": "Enable or disable ordering of updates by primary key."
        },
        {
          "value": "hibernate.order_inserts",
          "description": "Enable or disable ordering of inserts by primary key."
        },
        {
          "value": "hibernate.allow_update_outside_transaction",
          "description": "Allow updates to occur outside a transaction."
        },
        {
          "value": "hibernate.validator.apply_to_ddl",
          "description": "Apply Bean Validation constraints to DDL."
        },
        {
          "value": "hibernate.validator.autoregister_listeners",
          "description": "Automatically register Bean Validation listeners."
        },
        {
          "value": "hibernate.session_factory_name",
          "description": "The JNDI name of the session factory to use."
        },
        {
          "value": "hibernate.session_factory_name_is_jndi",
          "description": "Indicates if the session factory name is a JNDI name."
        },
        {
          "value": "hibernate.default_batch_fetch_size",
          "description": "The default batch fetch size for lazy loading."
        }
      ]
    }
  ]
}